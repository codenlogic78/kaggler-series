{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31012,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import sqlite3\nimport pandas as pd","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T10:44:16.683822Z","iopub.execute_input":"2025-04-28T10:44:16.684189Z","iopub.status.idle":"2025-04-28T10:44:18.961272Z","shell.execute_reply.started":"2025-04-28T10:44:16.684157Z","shell.execute_reply":"2025-04-28T10:44:18.960420Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"conn = sqlite3.connect('tutorialdb.db')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T10:44:18.962732Z","iopub.execute_input":"2025-04-28T10:44:18.963313Z","iopub.status.idle":"2025-04-28T10:44:18.967480Z","shell.execute_reply.started":"2025-04-28T10:44:18.963287Z","shell.execute_reply":"2025-04-28T10:44:18.966784Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"conn.execute('''\n            CREATE TABLE IF NOT EXISTS people(p_id INTEGER PRIMARY KEY,\n            p_name VARCHAR(255),\n            p_age INTEGER , \n            p_height FLOAT) ''')\n             ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T10:44:18.968180Z","iopub.execute_input":"2025-04-28T10:44:18.968440Z","iopub.status.idle":"2025-04-28T10:44:19.000878Z","shell.execute_reply.started":"2025-04-28T10:44:18.968416Z","shell.execute_reply":"2025-04-28T10:44:19.000134Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"<sqlite3.Cursor at 0x7bf255d90440>"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"tables = conn.execute(\"SELECT name FROM sqlite_master WHERE type='table';\").fetchall()\nfor table in tables:\n    print(table[0])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T10:44:24.478957Z","iopub.execute_input":"2025-04-28T10:44:24.479240Z","iopub.status.idle":"2025-04-28T10:44:24.484983Z","shell.execute_reply.started":"2025-04-28T10:44:24.479216Z","shell.execute_reply":"2025-04-28T10:44:24.484220Z"}},"outputs":[{"name":"stdout","text":"people\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":" conn.execute(\"INSERT INTO people(p_id,p_name) VALUES(1,'mike');\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T10:44:26.440893Z","iopub.execute_input":"2025-04-28T10:44:26.441190Z","iopub.status.idle":"2025-04-28T10:44:26.446936Z","shell.execute_reply.started":"2025-04-28T10:44:26.441165Z","shell.execute_reply":"2025-04-28T10:44:26.446031Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"<sqlite3.Cursor at 0x7bf248b8e140>"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"conn.execute(\"\"\"INSERT INTO people(p_id,p_name,p_age,p_height) VALUES\n              (3,'mike',40,180),\n              (5,'bob',63,72);\"\"\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T10:44:29.783393Z","iopub.execute_input":"2025-04-28T10:44:29.784439Z","iopub.status.idle":"2025-04-28T10:44:29.790004Z","shell.execute_reply.started":"2025-04-28T10:44:29.784391Z","shell.execute_reply":"2025-04-28T10:44:29.789146Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"<sqlite3.Cursor at 0x7bf248afe940>"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"cursor=conn.execute(\"SELECT * FROM people\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T10:44:32.005716Z","iopub.execute_input":"2025-04-28T10:44:32.006337Z","iopub.status.idle":"2025-04-28T10:44:32.010286Z","shell.execute_reply.started":"2025-04-28T10:44:32.006308Z","shell.execute_reply":"2025-04-28T10:44:32.009513Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"rows = cursor.fetchall()\n\nfor row in rows:\n    print(row)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-26T09:18:44.928270Z","iopub.execute_input":"2025-04-26T09:18:44.929102Z","iopub.status.idle":"2025-04-26T09:18:44.934635Z","shell.execute_reply.started":"2025-04-26T09:18:44.929070Z","shell.execute_reply":"2025-04-26T09:18:44.933479Z"}},"outputs":[{"name":"stdout","text":"(1, 'mike', None, None)\n(2, 'mike', 'Bob', 180.0)\n(3, 'mike', 40, 180.0)\n(5, 'bob', 63, 72.0)\n","output_type":"stream"}],"execution_count":16},{"cell_type":"code","source":"cursor2=conn.execute(\"\"\" SELECT p_name,p_height FROM people \n                 Where p_height > 180 OR p_age > 48\"\"\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-26T13:25:37.528667Z","iopub.execute_input":"2025-04-26T13:25:37.528967Z","iopub.status.idle":"2025-04-26T13:25:37.533930Z","shell.execute_reply.started":"2025-04-26T13:25:37.528946Z","shell.execute_reply":"2025-04-26T13:25:37.532915Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"rows2 = cursor2.fetchall()\n\nfor row in rows2:\n    print(row)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-26T13:25:40.418209Z","iopub.execute_input":"2025-04-26T13:25:40.418514Z","iopub.status.idle":"2025-04-26T13:25:40.425247Z","shell.execute_reply.started":"2025-04-26T13:25:40.418494Z","shell.execute_reply":"2025-04-26T13:25:40.424059Z"}},"outputs":[{"name":"stdout","text":"('bob', 72.0)\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"cursor3 = conn.execute(\"SELECT * FROM people\")\nrows3 = cursor3.fetchall()\n\nfor row in rows3:\n    print(row)\n\n# Then, update\nconn.execute(\"UPDATE people SET p_age = 35 WHERE p_id = 1\")\nconn.commit()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T10:48:15.284998Z","iopub.execute_input":"2025-04-28T10:48:15.285282Z","iopub.status.idle":"2025-04-28T10:48:15.300969Z","shell.execute_reply.started":"2025-04-28T10:48:15.285256Z","shell.execute_reply":"2025-04-28T10:48:15.299990Z"}},"outputs":[{"name":"stdout","text":"(1, 'mike', None, None)\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"cursor4 = conn.execute(\"SELECT * FROM people\")\nrows4 = cursor4.fetchall()\n\nfor row in rows4:\n    print(row)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T10:48:18.199808Z","iopub.execute_input":"2025-04-28T10:48:18.200487Z","iopub.status.idle":"2025-04-28T10:48:18.205146Z","shell.execute_reply.started":"2025-04-28T10:48:18.200456Z","shell.execute_reply":"2025-04-28T10:48:18.204310Z"}},"outputs":[{"name":"stdout","text":"(1, 'mike', 35, None)\n","output_type":"stream"}],"execution_count":19},{"cell_type":"code","source":"c5=conn.execute(\"DELETE FROM people WHERE p_age>70\")\nr5=c5.fetchall()\n\nfor row in r5:\n    print(row)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T10:47:50.484976Z","iopub.execute_input":"2025-04-28T10:47:50.485245Z","iopub.status.idle":"2025-04-28T10:47:50.490001Z","shell.execute_reply.started":"2025-04-28T10:47:50.485223Z","shell.execute_reply":"2025-04-28T10:47:50.489104Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"cursor6=conn.execute(\"SELECT * FROM people\")\nr6=cursor6.fetchall()\n\nfor row in r6:\n    print(row)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T10:54:24.438525Z","iopub.execute_input":"2025-04-28T10:54:24.438851Z","iopub.status.idle":"2025-04-28T10:54:24.444417Z","shell.execute_reply.started":"2025-04-28T10:54:24.438802Z","shell.execute_reply":"2025-04-28T10:54:24.443654Z"}},"outputs":[{"name":"stdout","text":"(1, 'mike', 35, None)\n(4, 'mary', 40, 180.0)\n(5, 'bob', 63, 72.0)\n(6, 'Harry', 28, 92.0)\n(7, 'Anna', 87, 92.0)\n(8, 'Rio', 64, 93.0)\n","output_type":"stream"}],"execution_count":31},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}